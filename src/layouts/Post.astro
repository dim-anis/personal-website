---
import type { CollectionEntry } from "astro:content";
import FormattedDate from "@/components/FormattedDate.astro";
import MayBeOutdated from "@/components/MayBeOutdated.astro";
import TableOfContents from "@/components/toc";
import { createToc } from "@/lib/toc";

type Props = CollectionEntry<"blog">;

const post = Astro.props;
const { data } = post;
const { title, pubDate, updatedDate, heroImage } = data;

const { headings } = await post.render();

const toc = createToc(headings);

const currDate = new Date();
const timeDiff =
  currDate.getTime() - (updatedDate?.getTime() || pubDate.getTime());
const yearsDiff = Math.floor(timeDiff / (1000 * 60 * 60 * 24 * 365.25));
const mayBeOutdated = yearsDiff >= 1;

const isSamePubUpDate = updatedDate?.getTime() === pubDate?.getTime();
---

<main
  id="main-content"
  class="container flex-1 relative py-10 lg:gap-10 xl:grid xl:grid-cols-[1fr_300px]"
>
  <article class="prose dark:prose-invert">
    {heroImage && <img src={heroImage} alt="" />}
    <h1>{title}</h1>
    <div class="italic text-sm">
      Published on <FormattedDate date={pubDate} />
    </div>
    {
      updatedDate && !isSamePubUpDate ? (
        <div class="italic text-sm">
          Last updated on <FormattedDate date={updatedDate} />
        </div>
      ) : null
    }
    {mayBeOutdated && <MayBeOutdated articleAgeInYears={yearsDiff} />}
    <slot />
  </article>
  <div class="hidden xl:block">
    <TableOfContents toc={toc} client:load />
  </div>
</main>
